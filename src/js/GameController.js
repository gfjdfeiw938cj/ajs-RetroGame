/* eslint-disable max-len */
import themes from './themes';
import cursors from './cursors';
import side from './side';
import GameState from './GameState';
import PositionedCharacter from './PositionedCharacter';
import Bowman from './heroes–°onstantsGame/Bowman';
import Daemon from './heroes–°onstantsGame/Daemon';
import Magician from './heroes–°onstantsGame/Magician';
import Swordsman from './heroes–°onstantsGame/Swordsman';
import Undead from './heroes–°onstantsGame/Undead';
import Vampire from './heroes–°onstantsGame/Vampire';
import {
  generateTeam,
  startFieldGenerator,
  getAvailableDistance,
  getAvailableAttack,
} from './generators';

// –¢–∏–ø—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userTypes = [Swordsman, Bowman, Magician];
const computerTypes = [Daemon, Undead, Vampire];

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = null; // –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  }

  /**
   * –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
   */
  init() {
    this.loadGame();
  }

  checkCell() {
    // –°–æ–±—ã—Ç–∏—è –º—ã—à–∏ –Ω–∞ —è—á–µ–π–∫–µ
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    this.gamePlay.addSaveGameListener(this.saveGame.bind(this));
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
    this.gamePlay.addLoadGameListener(this.loadGame.bind(this));
    // –ù–æ–≤–∞—è –∏–≥—Ä–∞
    this.gamePlay.addNewGameListener(this.newGame.bind(this));
  }

  /**
   * –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
   * @param {*} index * –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–æ—à–µ–ª –∫–ª–∏–∫
   * @returns -
   */
  onCellClick(index) {
   // –ù–∞—Ö–æ–¥–∏–º –∏–∑ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö obj –∏–Ω—Ñ. –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä—ã –∑–∞–ø–∏—Å–∞–Ω—ã–π –≤ (this.gameState.teams) —Ç–æ–≥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –≤—ã–±—Ä–∞–ª–∏.
    const hero = this.gameState.teams.find((elem) => elem.position === index);
    if (hero && hero.character.player === side.USER) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞–ª–∏ –Ω–∞ –≥–µ—Ä–µ–æ—è –∏ —Ö–æ–¥–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä 
      //–î–ª—è –∏–≥—Ä–æ–∫–∞ 
      if (this.gameState.selectedHero) this.gamePlay.deselectCell(this.gameState.selectedHero.position); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ (–ø–æ–¥—Å–≤–µ—á–µ–Ω—ã–π –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º) –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –µ–≥–æ –º—ã—à–∏ 
      this.gamePlay.selectCell(index); // –ú–µ—Ç–æ–¥ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ 
      this.gameState.availableSteps = getAvailableDistance(index, hero.character.stepsRadius); // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–æ–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é, –∑–∞ 1 —Ö–æ–¥. –í–æ–∑—Ä–∞—à–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –∑–æ–Ω—ã.
      this.gameState.availableAttack = getAvailableAttack(index, hero.character.attackRadius); // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞ 
      this.gameState.selectedHero = hero; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è (–ø–æ–¥—Å–≤–µ—á–µ–Ω—ã–π –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º) –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ. 
      return;
    }

    // –•–æ–¥. –ö–ª–∏–∫ –≤ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
    if (this.gameState.selectedHero) {
      // –í—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –≤—Ö–æ–¥–∏—Ç –≤ –¥–æ–ø—É—Å–∫ –∑–æ–Ω—ã –ø–µ—Ä–µ–º–µ—à–µ–Ω–∏—è –≥–µ—Ä–æ—è –∏ –≤ –Ω–µ–º –Ω–µ—Ç –≥–µ—Ä–æ—è
      if (this.gameState.availableSteps.includes(index) && !hero) {
        this.gamePlay.deselectCell(this.gameState.selectedHero.position); // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∂–µ–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—É—é –Ω–∞ –∏–≥—Ä–æ–∫–µ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∫—É–¥–∞ –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å.
        this.gameState.selectedHero.position = index; // –ú–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ. –ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—è –∏–∫–æ–Ω–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ. 
        this.gamePlay.deselectCell(index);// –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∑–µ–ª–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞
        this.checkLevel();
      }
      // –ï—Å–ª–∏ –≤ –ø–æ–ª–µ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫—É–µ–º
      if (hero && hero.character.player === side.COMP && this.gameState.availableAttack.includes(index)) {
        this.attack(hero, this.gameState.selectedHero, index);
      }
      // –°–æ–æ–±—â–µ–Ω–∏–µ
      if (hero && hero.character.player === side.COMP && !this.gameState.availableAttack.includes(index)) {
        this.gamePlay.showPopup('–ù—É–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ');
      }
      return;
    }
    // –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (!this.gameState.selectedHero && hero && hero.character.player === side.COMP) {
      let { type } = hero.character;
      type = type[0].toUpperCase() + type.slice(1);
      this.gamePlay.showPopup(`–≠—Ç–æ ${type}! –û–Ω —è–≤–Ω–æ –Ω–µ –∏–∑ –Ω–∞—à–∏—Ö!`);
    }

    // if (!this.gameState.selectedHero && !hero) {
    //   // GamePlay.showError('–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç');
    //   this.gamePlay.showPopup('–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç');
    // }
  }

  /**
   * –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å —è—á–µ–π–∫–∏
   * @param {*} index - –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏
   */
  onCellLeave(index) {
    // –£–±–∏—Ä–∞–µ–º —Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ "–ø—Ä–∏–º–µ—Ä(üéñ 1 ‚öî 25 üõ° 25 ‚ù§ 100)
    this.gamePlay.hideCellTooltip(index);
    // –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã–π –≥–µ—Ä–æ–π (–≥–µ—Ä–æ–π –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–π –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º) –Ω–µ —Å—Ö–æ–¥–∏–ª —Ç–æ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –≥–µ—Ä–æ–π –Ω–µ —Å—Ö–æ–¥–∏—Ç.
    if (this.gameState.selectedHero && (this.gameState.selectedHero.position !== index)) {
      this.gamePlay.deselectCell(index);
    }
  }

  /**
   * –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —è—á–µ–π–∫—É
   * @param {*} index - –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏
   */
  onCellEnter(index) {
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ obj –∏–Ω—Ñ –æ –≥–µ—Ä–æ—è—Ö –∏—Ö –ø–æ–∑–∏—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ –∏–≥—Ä. –ø–æ–ª–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ–π —è—á–µ–∫–∏ –∏–≥—Ä. –ø–æ–ª—è –≥–µ—Ä–æ—è —Ç–æ –≤–æ–∑—Ä–∞—à–µ–º obj –∏–Ω—Ñ –æ –≥–µ—Ä–æ–µ
    const hero = this.gameState.teams.find((elem) => elem.position === index);
    
    if (hero) { //–ï—Å–ª–∏ –≥–µ—Ä–æ–π –µ—Å—Ç—å –Ω–∞ —è—á–µ–π–∫–∏ —Ç–æ —Å–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –ø–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ "–ø—Ä–∏–º–µ—Ä(üéñ 1 ‚öî 25 üõ° 25 ‚ù§ 100)" –∏ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ showCellTooltip
      const toolTip = this.constructor.createToolTipTemplate.call(this, hero);
      this.gamePlay.showCellTooltip(toolTip, index);
    }
    // –ú–µ–Ω—è–µ–º —Ç–∏–ø –∫—É—Ä—Å–æ—Ä–∞,–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.activeCursor(hero);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂(–≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ–±–∑–Ω. –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º) –Ω–∞ –∏–≥—Ä. –ø–æ–ª–µ. –ï—Å–ª–∏ –¥–∞ —Ç–æ –≤–æ–∑–ª–µ –≥–µ—Ä–æ—è –ø–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—é –Ω–∞ —è—á–µ–π–∫—É –∏–≥—Ä. –ø–æ–ª—è –ø–æ—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è –æ–±–ª–∞—Å—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –µ–≥–æ —Ö–æ–¥–∞.  
    if (this.gameState.selectedHero) {
      this.activeCursorSelectedHero(index, hero);
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
   * @param {*} hero - –æ–±—ä–µ–∫—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @returns - —à–∞–±–ª–æ–Ω (—Å—Ç—Ä–æ–∫–∞)
   */
  static createToolTipTemplate(hero) {
    const {
      level,
      health,
      attack,
      defence,
    } = hero.character;
    return `\u{1F396} ${level} \u{2694} ${attack} \u{1F6E1} ${defence} \u{2764} ${health}`;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {*} hero - –æ–±—ä–µ–∫—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  activeCursor(hero) {
    if (hero) {
      const pointer = hero.character.player === side.USER ? cursors.pointer : cursors.notallowed; // –£—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–æ–π —Ç–∏–ø –∫—É—Ä—Å–æ—Ä–∞ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –Ω–∞–≤–µ–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞ —Ç–æ pointer, –µ—Å–ª–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ç–æ notallowed
      this.gamePlay.setCursor(pointer); //–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–≤—ã—Ö –∫—É—Ä—Å–æ—Ä–æ–≤.
    } else {
      this.gamePlay.setCursor(cursors.auto); // –ö—É—Ä—Å–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä)
    }
  }

  /**
   * –ò–∑–º–µ–Ω—è–µ—Ç —Ç–∏–ø–∞ –∫—É—Ä—Å–æ—Ä–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É —è—á–µ–π–∫–∏ —Ö–æ–¥–∞/–∞—Ç–∞–∫–∏ –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
   * @param {*} index - –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏
   * @param {*} hero - –æ–±—ä–µ–∫—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  activeCursorSelectedHero(index, hero) {
    if (this.gameState.availableSteps.includes(index) && !hero) { //–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤—Ö–æ–¥–∏—Ç –≤ –æ–±–ª–∞—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—à–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫ –∏–ª–∏ –ò–ò –∏–ª–∏ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏. 
      this.gamePlay.setCursor(cursors.pointer); // –º–µ–Ω—è–µ–º —Ç–∏–ø –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ 'pointer'
      this.gamePlay.selectCell(index, 'green'); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É –∑–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–º –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –∏–≥—Ä–æ–∫. (–∫—É—Ä—Å–æ—Ä –≤–≤–∏–¥–µ –∑–µ–ª–µ–Ω–æ–≥–æ –∫—Ä—É–≥–∞ –≤–ø–∏—Å–∞–Ω–æ–≥–æ –≤ –∫–ª–µ—Ç–∫—É –∏–≥—Ä. –ø–æ–ª—è)
    } else if (hero && hero.character.player === side.COMP && this.gameState.availableAttack.includes(index)) {
      this.gamePlay.setCursor(cursors.crosshair);
      this.gamePlay.selectCell(index, 'red');
    } else if (hero && hero.character.player === side.USER) {
      this.gamePlay.setCursor(cursors.pointer);
    } else {
      this.gamePlay.setCursor(cursors.notallowed);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
   */
  saveGame() {
    this.stateService.save(this.gameState);
    // GamePlay.showMessage('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    this.gamePlay.showPopup('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã, –µ—Å–ª–∏ —Ç–∞–∫–∞—è –µ—Å—Ç—å
   */
  loadGame() {
    // –ß—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –ª–∏—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    if (this.gamePlay.cellClickListeners.length === 0) {
      this.checkCell();
    }
    try {
      const load = this.stateService.load(); //–í–æ–∑–≤—Ä–∞—â–∞–µ–º Obj –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–≥—Ä–æ–π  
      if (load) {
        this.gameState = GameState.from(load); //–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º load –∏ –≤–æ–∑—Ä–∞—à–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤–æ–∑—Ä–∞—à–∞–µ–º this.gameState(Obj)
        this.gamePlay.drawUi(Object.values(themes)[this.gameState.stage - 1]); //–ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 63 —è—á–µ–µ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∑–∞–ø–∏—Å–∞–≤ –∏—Ö –≤ GamePlay.this.cells –∏ childNodes:(–ø—Å–µ–≤–¥–æ –º–∞—Å—Å–∏–≤) GamePlay.this.boardEl
        this.gamePlay.redrawPositions(this.gameState.teams); //–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä. –∫–∞—Ä—Ç–∞ —Å –∏–≥—Ä–æ–∫–∞–º–∏ 
      } else {
        this.newGame();
      }
    } catch (error) {
      // localStorage.removeItem('state');
      this.constructor.clearLocalStorage('state');
      this.gamePlay.showPopup(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: "${error.message}"`);
      this.newGame();
    }
  }

  /**
   * –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–Ω–∞—á–∞–ª–∞
   */
  newGame() {
    if (this.gamePlay.cellClickListeners.length === 0) {
      this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
    }
    const totalScores = this.gameState ? this.gameState.scores : 0;
    this.gameState = new GameState(1, [], side.USER, totalScores);
    this.nextStage(this.gameState.stage);
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
   */
  nextPlayer() {
    this.gameState.motion = (this.gameState.motion === side.USER) ? side.COMP : side.USER; // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ç–æ —Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä
    // console.log('–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫:', this.gameState.motion);
    if (this.gameState.motion === side.COMP) {
      this.computerLogic(); // –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∏ –∞—Ç–∞–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    }
    this.gameState.clear();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è
   */
  checkLevel() {
    const userValue = this.gameState.teams.some((member) => member.character.player === side.USER);// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –≥–µ—Ä–æ–π –≤ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  –≤–æ–∑—Ä–∞—à–∞–µ–º –ª–æ–≥–∏—á –∑–Ω–∞—á.
    const computerValue = this.gameState.teams.some((member) => member.character.player === side.COMP);//  –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –≥–µ—Ä–æ–π –≤ —Å–ø–∏—Å–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) –≤–æ–∑—Ä–∞—à–∞–µ–º –ª–æ–≥–∏—á –∑–Ω–∞—á.
    if (userValue && computerValue) {
      this.nextPlayer(); //  –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞. –ï—Å–ª–∏ —Ö–æ–¥–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä(–ò–ò) —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–µ–π—Å–≤–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä(–ò–ò). –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫—É —É–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç—å –∞—Ç–∞–∫–∏, –æ–±–ª–∞—Å—Ç—å —Ö–æ–¥–∞ –≥–µ—Ä–æ—è.  
      return;
    }
    if (!computerValue) {
      this.gameState.clear(); // –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–≥–æ–≤ –∏ –∞—Ç–∞–∫–∏
      this.gameState.addScores(); // –°—á–∏—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ —Ä–∞—É–Ω–¥
      this.nextStage(this.gameState.stage += 1); 
    }
    if (!userValue) {
      // GamePlay.showMessage('–í—Ä–∞–≥ –æ–∫–∞–∑–∞–ª—Å—è —Ö–∏—Ç—Ä–µ–µ –∏ —Å–∏–ª—å–Ω–µ–µ(((');
      this.gamePlay.showPopup('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
   * @param {number} stage - –ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è
   */
  nextStage(stage) {
    if (stage === 1) {
      this.constructor.teamGeneration.call(this, userTypes, side.USER, 1, 2);
      this.constructor.teamGeneration.call(this, computerTypes, side.COMP, 1, 2);
    }

    if (stage > 1 && stage < 5) {
      // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
      this.constructor.levelUp.call(this);
      // + –∫ –∫–æ–º–∞–Ω–¥–µ user
      const count = (stage === 2) ? 1 : 2;
      this.constructor.teamGeneration.call(this, userTypes, side.USER, stage - 1, count);
      // –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø–∞
      const userCount = this.gameState.teams.filter((member) => member.character.player === side.USER).length;
      this.constructor.teamGeneration.call(this, computerTypes, side.COMP, stage, userCount);
      this.gamePlay.showPopup(`–£—Ä–æ–≤–µ–Ω—å ${stage} –°—á–µ—Ç: ${this.gameState.scores}`);
    }

    if (stage >= 5) {
      // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—è
      this.gamePlay.cellClickListeners.length = 0;
      // GamePlay.showMessage(`–ü–æ–±–µ–¥–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°—á–µ—Ç: ${this.gameState.scores}`);
      this.gamePlay.showPopup(`–ü–æ–±–µ–¥–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°—á–µ—Ç: ${this.gameState.scores}`);
    } else {
      this.gamePlay.drawUi(Object.values(themes)[this.gameState.stage - 1]);
      this.gamePlay.redrawPositions(this.gameState.teams);
      // this.gamePlay.showPopup(`–£—Ä–æ–≤–µ–Ω—å ${stage} –°—á–µ—Ç: ${this.gameState.scores}`);
    }
  }

  /**
   * –ê—Ç–∞–∫–∞, —Ä–∞—Å—á–µ—Ç, –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≥–∏–±—à–µ–≥–æ –≥–µ—Ä–æ—è
   */
  async attack(attacked, attacker, indexAttacked) {
    // –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const { attack } = attacker.character;
    // –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∞—Ç–∞–∫—É–µ–º–æ–≥–æ
    const { defense } = attacked.character;
    // –ê—Ç–∞–∫—É–µ–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    const attackedUnit = attacked.character;
    // –£—Ä–æ–Ω –æ—Ç –∞—Ç–∞–∫–∏
    const damage = 2 * Math.round(Math.max((attack - defense, attack * 0.1)));
    attackedUnit.health -= damage;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±–∏—Ç –ª–∏ –≥–µ—Ä–æ–π
    if (attacked.character.health <= 0) {
      this.gameState.removeHero(indexAttacked);
    }
    // –í—ã–¥–µ–ª—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏ –∞—Ç–∞–∫—É–µ–º–æ–≥–æ –≥–µ—Ä–æ—è
    this.gamePlay.selectCell(attacker.position);
    this.gamePlay.selectCell(attacked.position, 'red');
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    this.gamePlay.redrawPositions(this.gameState.teams);
    // –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    this.gameState.selectedHero = null;
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —É—Ä–æ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await this.gamePlay.showDamage(indexAttacked, damage);
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏ –∞—Ç–∞–∫—É–µ–º–æ–≥–æ –≥–µ—Ä–æ—è
    this.gamePlay.deselectCell(attacker.position);
    this.gamePlay.deselectCell(attacked.position);
    this.checkLevel();
  }

  /**
   * –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∏ –∞—Ç–∞–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
   */
  computerLogic() {
    const { teams } = this.gameState;
    const computerTeams = teams.filter((member) => member.character.player === side.COMP); // –æ—Ç—Å–æ—Ä–∏—Ç—Ä—É–µ–º –≥–µ—Ä–æ–µ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò)
    const userTeams = teams.filter((member) => member.character.player === side.USER);// –æ—Ç—Å–æ—Ä–∏—Ç—Ä—É–µ–º –≥–µ—Ä–æ–µ–≤ –∏–≥—Ä–æ–∫–∞
    const arr2 = teams.map((el) => el.position);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
    const attack = computerTeams.some((compUnit) => {
      this.gameState.availableAttack = getAvailableAttack(compUnit.position, compUnit.character.attackRadius); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –∞—Ç–∞–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤(–ò–ò) 
      const attacked = userTeams.find((userUnit) => this.gameState.availableAttack.includes(userUnit.position)); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∑–æ–Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) 
      if (attacked) {
        this.attack(attacked, compUnit, attacked.position); // 
        return true; // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      }
      return false; // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    });
    // –•–æ–¥ computer
    if (!attack && computerTeams.length && userTeams.length) { // –£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä(–ò–ò) –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏ –µ—Å–ª–∏ –∂–∏–≤—ã–µ –≥–µ—Ä–æ–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä(–ò–ò) –∏ –∂–∏–≤—ã–µ –≥–µ—Ä–æ–∏ –ò–≥—Ä–æ–∫–∞
      const unit = Math.floor(Math.random() * computerTeams.length); // –ö—Ç–æ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –∏–∑ –≥–µ—Ä–æ–µ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) (–°–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä –≥–µ—Ä–æ—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å)
      const steps = getAvailableDistance(computerTeams[unit].position, computerTeams[unit].character.stepsRadius).filter((x) => teams.map((el) => el.position).indexOf(x) < 0); // –û–ø—Ä–µ–¥–µ–ª–∏–º –∑–æ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è —à–∞–≥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) –ø–æ –∏–≥—Ä. –∫–∞—Ä—Ç–µ 
      const step = Math.floor(Math.random() * steps.length); // –†—ç–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–≥–æ –≤ –∫–∞—á–µ—Å–≤–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò)
      computerTeams[unit].position = steps[step]; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫—É—é –∫–ª–µ—Ç–∫—É –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä. –í—ã–±–æ—Ä –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) —è—á–µ–µ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è. –í–æ–∑—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ steps
      this.checkLevel(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏ —Å—Ç–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –∑–æ–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è —à–∞–≥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞(–ò–ò) –∏ –∑–æ–Ω–æ–π –∞—Ç–∞–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤(–ò–ò)
      this.gamePlay.redrawPositions(this.gameState.teams); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –∏–≥—Ä. –∫–∞—Ä—Ç–µ –≥–µ—Ä–æ–µ–≤.
    }
  }

  /**
   * –ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
   */
  static levelUp() {
    let arr = [];
    for (const member of this.gameState.teams) {
      const parameter = member.character;
      member.position = startFieldGenerator(side.USER, arr); // –†–∞—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ –≥–µ—Ä–æ–µ–≤ –≤ —è—á–µ–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è  
      parameter.level += 1;
      parameter.health = parameter.health + 80 >= 100 ? 100 : parameter.health + 80; // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º—ã –µ–≥–æ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–π –∏–≥—Ä–µ
      parameter.attack = Math.floor(Math.max(parameter.attack, parameter.attack * (0.8 + parameter.health / 100)));
    }
    arr = [];
  }

  /**
   *  –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–≤–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–º –ø–æ–ª–µ)
   * @param {*} teamType - –ú–∞—Å—Å–∏–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–≥—Ä–æ–∫–∞
   * @param {*} prayer - –¢–∏–ø –∏–≥—Ä–æ–∫–∞ 'user' –∏–ª–∏ 'computer'
   * @returns - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ PositionedCharacter
   */
  static teamGeneration(teamType, prayer, maxLevel, count) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    let newTeam = generateTeam(teamType, maxLevel, count);
    // –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –Ω–∞ –ø–æ–ª–µ –ø–æ–∑–∏—Ü–∏–π
    const positionList = [];
    if (this.gameState.teams.length) {
      this.gameState.teams.forEach((elem) => positionList.push(elem.position));
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
    let arr = []
    newTeam = newTeam.toArray.reduce((acc, member) => {
      // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      let randomNumber = startFieldGenerator(prayer, arr);
      positionList.push(randomNumber);
      acc.push(new PositionedCharacter(member, randomNumber));
      return acc;
    }, []);
    arr = []
    this.gameState.teams.push(...newTeam);
  }

  /**
 * –û—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * @param {string} key - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ—á–∏—Å—Ç–∏—Ç—å localStorage;
 */
  static clearLocalStorage(key) {
    localStorage.removeItem(key);
  }
}
